When would you want to use a remote repository rather than keeping all your work
local?

  	 With a remote repository you can share your local repository with other 
     people and collaborate. Other people can contribute to your project.
     Since remote repositories are cloud based, they're accessible by anyone 
     with Internet access. Also they provide a form of backup. 
      
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  	 Because in that way you have more control over your code. If a new version
  	 of the code is availbale on GitHub but happens to be buggy, you might not 
  	 want to pull any changes until the bug is fixed.  

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

	 Forks, Clones and Branches are all ways to add changes without affecting 
	 the existing version.Forking is similar to Cloning. The main difference is 
     that when you fork a repository you clone it on GitHub service instead on 
     your own machine. You may want to use a fork when you want to collaborate 
     with a friend and make changes to an existing repository that you haven't 
     got push access. By cloning a repository you make an exact copy of it on 
     your local machine in order to make your own changes and work locally.

What is the benefit of having a copy of the last known state of the remote
stored locally?

     If I am about to go offline I can update the local copy of the remote 
	 (origin/master). I can do this even if I am not ready to merge the remote 
     changes into my own master branch. I can work on my own master branch and 
     when I get ready I can perform the merge offline.
	 
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

     If I had to collaborate on a coding project without using Git and GitHub, I
	 might suggest working on a shared folder on DropBox. However this approach 
	 is only applicable If each collaborator is working on a different file than
     the others. For two or more collaborators, working on the same file is 
     impossible with this approach. 
	 
     I might also suggest the following: 
     At the start of the day each collaborator starts with the same version of 
     the project. For every new feature, each collaborator must save a new 
     version. At the end of the day each collaborator must compare his/her last 
     version with the one given to him/her at the start of the day to find the 
	 differences (tedious process: create patches for each file in the project).
     Then, collaborators must gather together, present their changes, resolve 
     possible conflicts and decide which features are to be added into the 
     project (tedious & time consuming process). At the end, they'll have to 
     come up with a new version for the next day. Without Git & GitHub, 
     it's possible for two or more people to work on the same project file but 
     it requires great amount of effort to incorporate multiple changes and for 
     collaborators to be close to each other for discussion. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
